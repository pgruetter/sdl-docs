(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{110:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?r.a.createElement(f,s(s({ref:t},l),{},{components:n})):r.a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(110)),o={id:"commandLine",title:"Command Line"},s={unversionedId:"reference/commandLine",id:"reference/commandLine",isDocsHomePage:!1,title:"Command Line",description:"Command Line",source:"@site/docs/reference/commandLine.md",slug:"/reference/commandLine",permalink:"/sdl-docs/docs/reference/commandLine",version:"current",sidebar:"docs",previous:{title:"Build SDL",permalink:"/sdl-docs/docs/reference/build"},next:{title:"Execution Phases",permalink:"/sdl-docs/docs/reference/executionPhases"}},c=[],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"command-line"},"Command Line"),Object(i.b)("p",null,"SmartDataLakeBuilder is a java application.\nTo run on a cluster with spark-submit, use ",Object(i.b)("strong",{parentName:"p"},"DefaultSmartDataLakeBuilder")," application.\nIt can be started with the following command line options (for details, see ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/sdl-docs/docs/reference/deployYarn"}),"YARN"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"spark-submit --master yarn --deploy-mode client --class io.smartdatalake.app.DefaultSmartDataLakeBuilder target/smartdatalake_2.11-1.0.3-jar-with-dependencies.jar [arguments]\n")),Object(i.b)("p",null,"and takes the following arguments:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Usage: DefaultSmartDataLakeBuilder [options]\n  -f, --feed-sel &ltoperation?&gt&ltprefix:?&gt&ltregex&gt[,&ltoperation?&gt&ltprefix:?&gt&ltregex&gt...]\n    Select actions to execute by one or multiple expressions separated by comma (,). Results from multiple expressions are combined from left to right.\n    Operations:\n    - pipe symbol (|): the two sets are combined by union operation (default)\n    - ampersand symbol (&): the two sets are combined by intersection operation\n    - minus symbol (-): the second set is subtracted from the first set\n    Prefixes:\n    - 'feeds': select actions where metadata.feed is matched by regex pattern (default)\n    - 'names': select actions where metadata.name is matched by regex pattern\n    - 'ids': select actions where id is matched by regex pattern\n    - 'layers': select actions where metadata.layer of all output DataObjects is matched by regex pattern\n    - 'startFromActionIds': select actions which with id is matched by regex pattern and any dependent action (=successors)\n    - 'endWithActionIds': select actions which with id is matched by regex pattern and their predecessors\n    - 'startFromDataObjectIds': select actions which have an input DataObject with id is matched by regex pattern and any dependent action (=successors)\n    - 'endWithDataObjectIds': select actions which have an output DataObject with id is matched by regex pattern and their predecessors\n    All matching is done case-insensitive.\n    Example: to filter action 'A' and its successors but only in layer L1 and L2, use the following pattern: \"startFromActionIds:a,&layers:(l1|l2)\"\n  -n, --name &ltvalue&gt       Optional name of the application. If not specified feed-sel is used.\n  -c, --config &ltfile1&gt[,&ltfile2&gt...]\n    One or multiple configuration files or directories containing configuration files, separated by comma. Entries must be valid Hadoop URIs or a special URI with scheme \"cp\" which is treated as classpath entry.\n  --partition-values &ltpartitionColName&gt=&ltpartitionValue&gt[,&ltpartitionValue&gt,...]\n    Partition values to process for one single partition column.\n  --multi-partition-values &ltpartitionColName1&gt=&ltpartitionValue&gt,&ltpartitionColName2&gt=&ltpartitionValue&gt[;(&ltpartitionColName1&gt=&ltpartitionValue&gt,&ltpartitionColName2&gt=&ltpartitionValue&gt;...]\n    Partition values to process for multiple partitoin columns.\n  -s, --streaming          Enable streaming mode for continuous processing.\n  --parallelism &ltint&gt      Parallelism for DAG run.\n  --state-path &ltpath&gt      Path to save run state files. Must be set to enable recovery in case of failures.\n  --override-jars &ltjar1&gt[,&ltjar2&gt...]\n    Comma separated list of jar filenames for child-first class loader. The jars must be present in classpath.\n  --test &ltconfig|dry-run&gt  Run in test mode: config -&gt validate configuration, dry-run -&gt execute prepare- and init-phase only to check environment and spark lineage\n  --help                   Display the help text.\n  --version                Display version information.\n")),Object(i.b)("p",null,"The ",Object(i.b)("strong",{parentName:"p"},"DefaultSmartDataLakeBuilder")," class should be fine in most situations.\nThere are two additional, adapted application versions you can use:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"LocalSmartDataLakeBuilder"),": default for Spark master is ",Object(i.b)("inlineCode",{parentName:"li"},"local[*]")," in this case, and it has additional properties to configure Kerberos authentication.\nUse can use this application to run in a local environment (e.g. IntelliJ) without cluster deployment."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"DatabricksSmartDataLakeBuilder"),": see ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/sdl-docs/docs/reference/deploy-microsoft-azure"}),"Microsoft Azure"),", special class when running a Databricks Cluster.")))}p.isMDXComponent=!0}}]);