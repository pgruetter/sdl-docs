(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{110:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return f}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(a),u=n,f=m["".concat(s,".").concat(u)]||m[u]||b[u]||o;return a?r.a.createElement(f,i(i({ref:t},p),{},{components:a})):r.a.createElement(f,i({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return l}));var n=a(3),r=a(7),o=(a(0),a(110)),s={id:"transformations",title:"Transformations"},i={unversionedId:"reference/transformations",id:"reference/transformations",isDocsHomePage:!1,title:"Transformations",description:"This page is under review and currently not visible in the menu.",source:"@site/docs/reference/transformations.md",slug:"/reference/transformations",permalink:"/sdl-docs/docs/reference/transformations",version:"current"},c=[{value:"Spark Transformations",id:"spark-transformations",children:[{value:"Predefined Transformations",id:"predefined-transformations",children:[]},{value:"Custom Transformations",id:"custom-transformations",children:[]}]}],p={rightToc:c};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This page is under review and currently not visible in the menu."))),Object(o.b)("h2",{id:"spark-transformations"},"Spark Transformations"),Object(o.b)("p",null,"To implement custom transformation logic, define the ",Object(o.b)("strong",{parentName:"p"},"transformers")," attribute of an Action. It allows you to chain several transformation in a linear process,\nwhere output SubFeeds from one transformation are use as input for the next.",Object(o.b)("br",{parentName:"p"}),"\n","Note that the definition of the transformations looks different for:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"1-to-1")," transformations (","*","DfTransformer): One input DataFrame is transformed into one output DataFrame. This is the case for CopyAction, DeduplicateAction and HistorizeAction."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"many-to-many")," transformations (","*","DfsTransformer): Many input DataFrames can be transformed into many output DataFrames. This is the case for CustomSparkAction.")),Object(o.b)("p",null,"The configuration allows you to use predefined standard transformations or to define custom transformation in various languages."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Deprecation Warning"),": there has been a refactoring of transformations in Version 2.0.5. The attribute ",Object(o.b)("strong",{parentName:"p"},"transformer")," is deprecated and will be removed in future versions. Use ",Object(o.b)("strong",{parentName:"p"},"transformers")," instead."),Object(o.b)("h3",{id:"predefined-transformations"},"Predefined Transformations"),Object(o.b)("p",null,"Predefined transformations implement generic logic to be reused in different actions. The following Transformers exist:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"FilterTransformer (1-to-1): Filter DataFrame with expression"),Object(o.b)("li",{parentName:"ul"},"BlacklistTransformer (1-to-1): Apply a column blacklist to a DataFrame"),Object(o.b)("li",{parentName:"ul"},"WhitelistTransformer (1-to-1): Apply a column whitelist to a DataFrame"),Object(o.b)("li",{parentName:"ul"},"AdditionalColumnsTransformer (1-to-1): Add additional columns to the DataFrame by extracting information from the context"),Object(o.b)("li",{parentName:"ul"},"StandardizeDatatypesTransformer (1-to-1): Standardize datatypes of a DataFrame"),Object(o.b)("li",{parentName:"ul"},"DfTransformerWrapperDfsTransformer (many-to-many): use 1-to-1 transformer as many-to-many transformer by specifying the SubFeeds it should be applied to")),Object(o.b)("h3",{id:"custom-transformations"},"Custom Transformations"),Object(o.b)("p",null,"Custom transformers provide an easy way to define your own spark logic in various languages."),Object(o.b)("p",null,"You can pass static ",Object(o.b)("strong",{parentName:"p"},"options")," and ",Object(o.b)("strong",{parentName:"p"},"runtimeOptions")," to custom transformations. runtimeOptions are extracted at runtime from the context.\nSpecifying options allows to reuse a transformation in different settings."),Object(o.b)("h4",{id:"javascala"},"Java/Scala"),Object(o.b)("p",null,"You can use Spark Dataset API in Java/Scala to define custom transformations.\nIf you have a Java project, create a class that extends CustomDfTransformer or CustomDfsTransformer and implement ",Object(o.b)("inlineCode",{parentName:"p"},"transform")," method.\nThen use ",Object(o.b)("strong",{parentName:"p"},"type = ScalaClassDfTransformer")," or ",Object(o.b)("strong",{parentName:"p"},"type = ScalaClassDfsTransformer")," and configure ",Object(o.b)("strong",{parentName:"p"},"className")," attribute."),Object(o.b)("p",null,"If you work without Java project, it's still possible to define your transformation in Java/Scala and compile it at runtime.\nFor a 1-to-1 transformation use ",Object(o.b)("strong",{parentName:"p"},"type = ScalaCodeDfTransformer")," and configure ",Object(o.b)("strong",{parentName:"p"},"code")," or ",Object(o.b)("strong",{parentName:"p"},"file")," as a function that takes ",Object(o.b)("inlineCode",{parentName:"p"},"session: SparkSession, options: Map[String,String], df: DataFrame, dataObjectName: String")," as parameters and returns a ",Object(o.b)("inlineCode",{parentName:"p"},"DataFrame"),".\nFor many-to-many transformations use ",Object(o.b)("strong",{parentName:"p"},"type = ScalaCodeDfsTransformer")," and configure ",Object(o.b)("strong",{parentName:"p"},"code")," or ",Object(o.b)("strong",{parentName:"p"},"file")," as a function that takes ",Object(o.b)("inlineCode",{parentName:"p"},"session: SparkSession, options: Map[String,String], dfs: Map[String,DataFrame]")," with DataFrames per input DataObject as parameter, and returns a ",Object(o.b)("inlineCode",{parentName:"p"},"Map[String,DataFrame]")," with the DataFrame per output DataObject."),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/smart-data-lake/sdl-examples"}),"sdl-examples")," for details."),Object(o.b)("h4",{id:"sql"},"SQL"),Object(o.b)("p",null,"You can use Spark SQL to define custom transformations.\nInput dataObjects are available as tables to select from. Use tokens %{","<","key",">","} to replace with runtimeOptions in SQL code.\nFor a 1-to-1 transformation use ",Object(o.b)("strong",{parentName:"p"},"type = SQLDfTransformer")," and configure ",Object(o.b)("strong",{parentName:"p"},"code")," as your SQL transformation statement.\nFor many-to-many transformations use ",Object(o.b)("strong",{parentName:"p"},"type = SQLDfsTransformer")," and configure ",Object(o.b)("strong",{parentName:"p"},"code"),' as a Map of "',"<","outputDataObjectId",">",", ","<","SQL transformation statement",">",'".'),Object(o.b)("p",null,"Example - using options in sql code for 1-to-1 transformation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'transformers = [{\n  type = SQLDfTransformer\n  name = "test run"\n  description = "description of test run..."\n  sqlCode = "select id, cnt, \'%{test}\' as test, %{run_id} as last_run_id from dataObject1"\n  options = {\n    test = "test run"\n  }\n  runtimeOptions = {\n    last_run_id = "runId - 1" // runtime options are evaluated as spark SQL expressions against DefaultExpressionData\n  }\n}]\n')),Object(o.b)("p",null,"Example - defining a many-to-many transformation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"transformers = [{\n  type = SQLDfsTransformer\n  code = {\n    dataObjectOut1 = \"select id,cnt from dataObjectIn1 where group = 'test1'\",\n    dataObjectOut2 = \"select id,cnt from dataObjectIn1 where group = 'test2'\"\n  }\n}\n")),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/smart-data-lake/sdl-examples"}),"sdl-examples")," for details."),Object(o.b)("h4",{id:"python"},"Python"),Object(o.b)("p",null,"It's also possible to use Python to define a custom Spark transformation.\nFor a 1-to-1 transformation use ",Object(o.b)("strong",{parentName:"p"},"type = PythonCodeDfTransformer")," and configure ",Object(o.b)("strong",{parentName:"p"},"code")," or ",Object(o.b)("strong",{parentName:"p"},"file")," as a python function.\nPySpark session is initialize and available under variables ",Object(o.b)("inlineCode",{parentName:"p"},"sc"),", ",Object(o.b)("inlineCode",{parentName:"p"},"session"),", ",Object(o.b)("inlineCode",{parentName:"p"},"sqlContext"),".\nOther variables available are"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"inputDf"),": Input DataFrame"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"options"),": Transformation options as Map","[String,String]"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"dataObjectId"),": Id of input dataObject as String")),Object(o.b)("p",null,"Output DataFrame must be set with ",Object(o.b)("inlineCode",{parentName:"p"},"setOutputDf(df)"),"."),Object(o.b)("p",null,"For now using Python for many-to-many transformations is not possible, although it would be not so hard to implement."),Object(o.b)("p",null,"Example - apply some python calculation as udf:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'transformers = [{\n  type = PythonCodeDfTransformer \n  code = """\n    |from pyspark.sql.functions import *\n    |udf_multiply = udf(lambda x, y: x * y, "int")\n    |dfResult = inputDf.select(col("name"), col("cnt"))\\\n    |  .withColumn("test", udf_multiply(col("cnt").cast("int"), lit(2)))\n    |setOutputDf(dfResult)\n  """\n}]\n')),Object(o.b)("p",null,"Requirements:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Spark 2.4.x:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Python version ",">","= 3.4 an ","<","= 3.7"),Object(o.b)("li",{parentName:"ul"},"PySpark package matching your spark version"))),Object(o.b)("li",{parentName:"ul"},"Spark 3.x:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Python version ",">","= 3.4"),Object(o.b)("li",{parentName:"ul"},"PySpark package matching your spark version")))),Object(o.b)("p",null,"See Readme of ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/smart-data-lake/sdl-examples"}),"sdl-examples")," for a working example and instructions to setup python environment for IntelliJ"),Object(o.b)("p",null,"How it works: under the hood a PySpark DataFrame is a proxy for a Java Spark DataFrame. PySpark uses Py4j to access Java objects in the JVM."))}l.isMDXComponent=!0}}]);