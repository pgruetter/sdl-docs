(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var a=n(3),o=n(7),i=(n(0),n(95)),r={id:"firstConfig",title:"First Configuration",sidebar_label:"First Configuration"},s={unversionedId:"firstConfig",id:"firstConfig",isDocsHomePage:!1,title:"First Configuration",description:"The following page will show you how to build the project and run your first feed.",source:"@site/docs/firstConfig.md",slug:"/firstConfig",permalink:"/sdl-docs/docs/firstConfig",version:"current",sidebar_label:"First Configuration",sidebar:"docs",previous:{title:"Build",permalink:"/sdl-docs/docs/build"},next:{title:"First Run",permalink:"/sdl-docs/docs/firstRun"}},l=[{value:"Configure",id:"configure",children:[]},{value:"Sample data",id:"sample-data",children:[]}],d={rightToc:l};function c(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The following page will show you how to build the project and run your first feed.\nFor a more comprehensive explanation of all options, see the (Reference.md)."),Object(i.b)("p",null,"To run a first example, you need the jar file (see #Build)), an application.conf and some sample data."),Object(i.b)("h2",{id:"configure"},"Configure"),Object(i.b)("p",null,"To run a first example, you need to create a file called ",Object(i.b)("strong",{parentName:"p"},"application.conf")," in a folder we will call ",Object(i.b)("strong",{parentName:"p"},"resource folder")," from now on.\nUse the following content for your file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'dataObjects { \n  ab-csv-org {\n    type = CsvFileDataObject\n    path = "AB_NYC_2019.csv"\n  }\n  ab-excel {\n    type = ExcelFileDataObject\n    path = "~{id}/AB_NYC_2019.xlsx"\n    excel-options {\n      sheet-name = csvdata\n    }\n  }\n}\n\nactions {\n  getting-started {\n    type = CopyAction\n    inputId = ab-csv-org\n    outputId = ab-excel\n    metadata {\n      feed = getting-started\n    }  \n  }\n}\n')),Object(i.b)("p",null,"Explanation:",Object(i.b)("br",{parentName:"p"}),"\n","We defined two data objects in the application.conf.\nThe first one has an id of ",Object(i.b)("strong",{parentName:"p"},"ab-cvs-org")," and represents the CSV sample file we will use.\nIt has a path (with filename) where the file is stored and defines some CSV options like the delimiter used and whether the file has a header or not.",Object(i.b)("br",{parentName:"p"}),"\n","The second data object has an id of ",Object(i.b)("strong",{parentName:"p"},"ab-excel")," and represents an Excel file.\nAgain, with a path to the Excel file and some options, in this case the name of the Excel sheet.\nNote that we used a placeholder ",Object(i.b)("strong",{parentName:"p"},"~{id}")," in the pathname that will get substituted at runtime with the id of the data object."),Object(i.b)("p",null,"Next, we define one action that reads from the CSV file (inputId) and writes an Excel file (outputId).\ninputId and outputId reference the ids of the data objects defined above.\nThe type is set to CopyAction so the data will simply be copied without any transformations.\nAdditionally, we defined some metadata on this action, namely a feed name.\nFeed names are used mainly for selecting the tasks to run and to organize your metadata."),Object(i.b)("p",null,"As a result, this action will read the data from a CSV file and save them as an Excel file."),Object(i.b)("h2",{id:"sample-data"},"Sample data"),Object(i.b)("p",null,"You can use any CSV file for this first example.\nWe used an open data set for these tests which you can download from ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.kaggle.com/dgomonov/new-york-city-airbnb-open-data"}),"Kaggle"),"."))}c.isMDXComponent=!0}}]);