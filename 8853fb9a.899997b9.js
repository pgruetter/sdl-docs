(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{122:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),b=i,m=p["".concat(r,".").concat(b)]||p[b]||u[b]||o;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var i=n(3),a=n(7),o=(n(0),n(122)),r={id:"executionModes",title:"Execution Modes"},c={unversionedId:"reference/executionModes",id:"reference/executionModes",isDocsHomePage:!1,title:"Execution Modes",description:"This page is under review and currently not visible in the menu.",source:"@site/docs/reference/executionModes.md",slug:"/reference/executionModes",permalink:"/sdl-docs/docs/reference/executionModes",version:"current"},s=[{value:"Execution modes",id:"execution-modes",children:[{value:"Fixed partition values filter",id:"fixed-partition-values-filter",children:[]},{value:"PartitionDiffMode: Dynamic partition values filter",id:"partitiondiffmode-dynamic-partition-values-filter",children:[]},{value:"SparkStreamingMode: Incremental load",id:"sparkstreamingmode-incremental-load",children:[]},{value:"SparkIncrementalMode: Incremental Load",id:"sparkincrementalmode-incremental-load",children:[]},{value:"FailIfNoPartitionValuesMode",id:"failifnopartitionvaluesmode",children:[]},{value:"ProcessAllMode",id:"processallmode",children:[]},{value:"CustomPartitionMode",id:"custompartitionmode",children:[]}]},{value:"Execution Condition",id:"execution-condition",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(o.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This page is under review and currently not visible in the menu."))),Object(o.b)("h2",{id:"execution-modes"},"Execution modes"),Object(o.b)("p",null,"Execution modes select the data to be processed. By default, if you start SmartDataLakeBuilder, there is no filter applied. This means every Action reads all data from its input DataObjects."),Object(o.b)("p",null,'You can set an execution mode by defining attribute "executionMode" of an Action. Define the chosen ExecutionMode by setting type as follows:'),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"executionMode {\n  type = PartitionDiffMode\n  attribute1 = ...\n}\n")),Object(o.b)("h3",{id:"fixed-partition-values-filter"},"Fixed partition values filter"),Object(o.b)("p",null,"You can apply a filter manually by specifying parameter ",Object(o.b)("inlineCode",{parentName:"p"},"--partition-values")," or ",Object(o.b)("inlineCode",{parentName:"p"},"--multi-partition-values")," on the command line. The partition values specified are passed to all start-Actions of a DAG and filtered for every input DataObject by its defined partition columns.\nOn execution every Action takes the partition values of the input and filters them again for every output DataObject by its defined partition columns, which serve again as partition values for the input of the next Action.\nNote that during execution of the dag, no new partition values are added, they are only filtered. An exception is if you place a PartitionDiffMode in the middle of your pipeline, see next section."),Object(o.b)("h3",{id:"partitiondiffmode-dynamic-partition-values-filter"},"PartitionDiffMode: Dynamic partition values filter"),Object(o.b)("p",null,"Alternatively you can let SmartDataLakeBuilder find missing partitions and set partition values automatically by specifying execution mode PartitionDiffMode."),Object(o.b)("p",null,"By defining the ",Object(o.b)("strong",{parentName:"p"},"applyCondition")," attribute you can give a condition to decide at runtime if the PartitionDiffMode should be applied or not.\nDefault is to apply the PartitionDiffMode if the given partition values are empty (partition values from command line or passed from previous action).\nDefine an applyCondition by a spark sql expression working with attributes of DefaultExecutionModeExpressionData returning a boolean."),Object(o.b)("p",null,"By defining the ",Object(o.b)("strong",{parentName:"p"},"failCondition")," attribute you can give a condition to fail application of execution mode if true.\nIt can be used to fail a run based on expected partitions, time and so on.\nThe expression is evaluated after execution of PartitionDiffMode, amongst others there are attributes inputPartitionValues, outputPartitionValues and selectedPartitionValues to make the decision.\nDefault is that the application of the PartitionDiffMode does not fail the action. If there is no data to process, the following actions are skipped.\nDefine a failCondition by a spark sql expression working with attributes of PartitionDiffModeExpressionData returning a boolean."),Object(o.b)("p",null,'Example - fail if partitions are not processed in strictly increasing order of partition column "dt":'),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'  failCondition = "(size(selectedPartitionValues) > 0 and array_min(transform(selectedPartitionValues, x -&gt x.dt)) &lt array_max(transform(outputPartitionValues, x > x.dt)))"\n')),Object(o.b)("p",null,"Sometimes the failCondition can become quite complex with multiple terms concatenated by or-logic.\nTo improve interpretabily of error messages, multiple fail conditions can be configured as array with attribute ",Object(o.b)("strong",{parentName:"p"},"failConditions"),". For every condition you can also define a description which will be inserted into the error message."),Object(o.b)("p",null,"Finally By defining ",Object(o.b)("strong",{parentName:"p"},"selectExpression")," you can customize which partitions are selected.\nDefine a spark sql expression working with attributes of PartitionDiffModeExpressionData returning a Seq(Map(String,String))."),Object(o.b)("p",null,"Example - only process the last selected partition:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'  selectExpression = "slice(selectedPartitionValues,-1,1)"\n')),Object(o.b)("p",null,"By defining ",Object(o.b)("strong",{parentName:"p"},"alternativeOutputId")," attribute you can define another DataObject which will be used to check for already existing data.\nThis can be used to select data to process against a DataObject later in the pipeline."),Object(o.b)("h3",{id:"sparkstreamingmode-incremental-load"},"SparkStreamingMode: Incremental load"),Object(o.b)("p",null,'Some DataObjects are not partitioned, but nevertheless you dont want to read all data from the input on every run. You want to load it incrementally.\nThis can be accomplished by specifying execution mode SparkStreamingMode. Under the hood it uses "Spark Structured Streaming".\nIn streaming mode this an Action with SparkStreamingMode is an asynchronous action. Its rhythm can be configured by setting triggerType and triggerTime.\nIf not in streaming mode SparkStreamingMode triggers a single microbatch by using triggerType=Once and is fully synchronized. Synchronous execution can be forced for streaming mode as well by explicitly setting triggerType=Once.\n"Spark Structured Streaming" is keeping state information about processed data. It needs a checkpointLocation configured which can be given as parameter to SparkStreamingMode.'),Object(o.b)("p",null,'Note that "Spark Structured Streaming" needs an input DataObject supporting the creation of streaming DataFrames.\nFor the time being, only the input sources delivered with Spark Streaming are supported.\nThis are KafkaTopicDataObject and all SparkFileDataObjects, see also ',Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#creating-streaming-dataframes-and-streaming-datasets"}),"Spark StructuredStreaming"),"."),Object(o.b)("h3",{id:"sparkincrementalmode-incremental-load"},"SparkIncrementalMode: Incremental Load"),Object(o.b)("p",null,"As not every input DataObject supports the creation of streaming DataFrames, there is an other execution mode called SparkIncrementalMode.\nYou configure it by defining the attribute ",Object(o.b)("strong",{parentName:"p"},"compareCol")," with a column name present in input and output DataObject.\nSparkIncrementalMode then compares the maximum values between input and output and creates a filter condition.\nOn execution the filter condition is applied to the input DataObject to load the missing increment.\nNote that compareCol needs to have a sortable datatype."),Object(o.b)("p",null,"By defining ",Object(o.b)("strong",{parentName:"p"},"applyCondition")," attribute you can give a condition to decide at runtime if the SparkIncrementalMode should be applied or not.\nDefault is to apply the SparkIncrementalMode. Define an applyCondition by a spark sql expression working with attributes of DefaultExecutionModeExpressionData returning a boolean."),Object(o.b)("p",null,"By defining ",Object(o.b)("strong",{parentName:"p"},"alternativeOutputId")," attribute you can define another DataObject which will be used to check for already existing data.\nThis can be used to select data to process against a DataObject later in the pipeline."),Object(o.b)("h3",{id:"failifnopartitionvaluesmode"},"FailIfNoPartitionValuesMode"),Object(o.b)("p",null,"To simply check if partition values are present and fail otherwise, configure execution mode FailIfNoPartitionValuesMode.\nThis is useful to prevent potential reprocessing of whole table through wrong usage."),Object(o.b)("h3",{id:"processallmode"},"ProcessAllMode"),Object(o.b)("p",null,"An execution mode which forces processing all data from it's inputs, removing partitionValues and filter conditions received from previous actions."),Object(o.b)("h3",{id:"custompartitionmode"},"CustomPartitionMode"),Object(o.b)("p",null,"An execution mode to create custom partition execution mode logic in scala.\nImplement trait CustomPartitionModeLogic by defining a function which receives main input&output DataObject and returns partition values to process as Seq[Map","[String,String]","]"),Object(o.b)("h2",{id:"execution-condition"},"Execution Condition"),Object(o.b)("p",null,"For every Action an executionCondition can be defined. The execution condition allows to define if an action is executed or skipped. The default behaviour is that an Action is skipped if at least one input SubFeed is skipped.\nDefine an executionCondition by a spark sql expression working with attributes of SubFeedsExpressionData returning a boolean.\nThe Action is skipped if the executionCondition is evaluated to false. In that case dependent actions get empty SubFeeds marked with isSkipped=true as input."),Object(o.b)("p",null,"Example - skip Action only if input1 and input2 SubFeed are skipped:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'  executionCondition = "!inputSubFeeds.input1.isSkipped or !inputSubFeeds.input2.isSkipped"\n')),Object(o.b)("p",null,"Example - Always execute Action and use all existing data as input:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"  executionCondition = true\n  executionMode = ProcessAllMode\n")))}d.isMDXComponent=!0}}]);