(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{101:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},b=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=d(a),m=n,u=b["".concat(i,".").concat(m)]||b[m]||p[m]||r;return a?o.a.createElement(u,s(s({ref:t},c),{},{components:a})):o.a.createElement(u,s({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},156:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/files/application-deltalake-part2-7b02a8505fc1f1a7f27dcdec4bbfc080.conf"},92:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return d}));var n=a(3),o=a(7),r=(a(0),a(101)),i={title:"Delta Lake - a better data format"},s={unversionedId:"getting-started/part-2/delta-lake-format",id:"getting-started/part-2/delta-lake-format",isDocsHomePage:!1,title:"Delta Lake - a better data format",description:"Goal",source:"@site/docs/getting-started/part-2/delta-lake-format.md",slug:"/getting-started/part-2/delta-lake-format",permalink:"/sdl-docs/docs/getting-started/part-2/delta-lake-format",version:"current",sidebar:"docs",previous:{title:"Industrializing our data pipeline",permalink:"/sdl-docs/docs/getting-started/part-2/industrializing"},next:{title:"Keeping historical data",permalink:"/sdl-docs/docs/getting-started/part-2/historical-data"}},l=[{value:"Goal",id:"goal",children:[]},{value:"File formats",id:"file-formats",children:[]},{value:"Catalog",id:"catalog",children:[]},{value:"Transactions",id:"transactions",children:[]},{value:"DeltaLakeTableDataObject",id:"deltalaketabledataobject",children:[]},{value:"Reading Delta Lake Format with Spark",id:"reading-delta-lake-format-with-spark",children:[]}],c={rightToc:l};function d(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"goal"},"Goal"),Object(r.b)("p",null,"Up to now we have used CSV with CsvFileDataObject as file format. We will switch to a more modern data format in this step which supports a catalog, compression and even transactions."),Object(r.b)("h2",{id:"file-formats"},"File formats"),Object(r.b)("p",null,"Smart Data Lake Builder has built in support for many data formats and technologies.\nAn important one is storing files on a Hadoop filesystem, supporting standard file formats such as CSV, Json, Avro or Parquet.\nIn Part 1 we have used CSV through the CsvFileDataObject. CSV files can be easily checked in an editor or Excel, but the format also has many problems, e.g. support of multi-line strings or lack of data type definition.\nOften Parquet format is used, as it includes a schema definition and is very space efficient through its columnar compression."),Object(r.b)("h2",{id:"catalog"},"Catalog"),Object(r.b)("p",null,"Just storing files on Hadoop filesystem makes it difficult to use them in a SQL engine such as Spark SQL. You need a metadata layer on top which stores table definitions. This is also called a metastore or catalog.\nIf you start a Spark session, a configuration to connect to an external catalog can be set, or otherwise Spark creates an internal catalog for the session.\nWe could register our CSV files in this catalog by creating a table via a DDL-statement, including the definition of all columns, a path and the format of our data.\nBut you could also directly create and write into a table by using Spark Hive tables.\nSmart Data Lake Builder supports this by the HiveTableDataObject. It always uses Parquet file format in the background as a best practice, although Hive tables could also be created on top of CSV files."),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Hive is a Metadata layer and SQL engine on top of a Hadoop filesystem. Spark uses the metadata layer of Hive, but implements its own SQL engine."))),Object(r.b)("h2",{id:"transactions"},"Transactions"),Object(r.b)("p",null,"Hive tables with Parquet format are lacking transactions. This means for example that writing and reading the table at the same time could result in failure or empty results.\nIn consequence "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"consecutive jobs need to by synchronized"),Object(r.b)("li",{parentName:"ul"},"it's not recommended having end-user accessing the table while data processing jobs are running"),Object(r.b)("li",{parentName:"ul"},"update and deletes are not supported")),Object(r.b)("p",null,"There are other options like classical databases which always had a metadata layer, offer transactions but don't integrate easily with Hive metastore and cheap, scalable Hadoop file storage.\nNevertheless, Smart Data Lake Builder supports classical databases through the JdbcTableDataObject.\nFortunately there is a new technology called Delta Lake, see also ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://delta.io/"}),"delta.io"),". It integrates into a Hive metastore, supports transactions and stores Parquet files and a transaction log on hadoop filesystems.\nSmart Data Lake Builder supports this by the DeltaLakeTableDataObject, and this is what we are going to use for our airport and departure data now."),Object(r.b)("h2",{id:"deltalaketabledataobject"},"DeltaLakeTableDataObject"),Object(r.b)("p",null,"Switching to Delta Lake format is easy with Smart Data Lake Builder, just replace ",Object(r.b)("inlineCode",{parentName:"p"},"CsvFileDataObject")," with ",Object(r.b)("inlineCode",{parentName:"p"},"DeltaLakeTableDataObject")," and define the table's db and name.\nLet's start by changing the existing definition for ",Object(r.b)("inlineCode",{parentName:"p"},"int-airports"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'int-airports {\n    type = DeltaLakeTableDataObject\n    path = "~{id}"\n    table = {\n        db = default\n        name = int_airports\n    }\n}\n')),Object(r.b)("p",null,"Then create a new, similar data object ",Object(r.b)("inlineCode",{parentName:"p"},"int-departures"),": "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'int-departures {\n    type = DeltaLakeTableDataObject\n    path = "~{id}"\n    table = {\n        db = default\n        name = int_departures\n    }\n}\n')),Object(r.b)("p",null,"Next, create a new action ",Object(r.b)("inlineCode",{parentName:"p"},"prepare-departures")," in the ",Object(r.b)("inlineCode",{parentName:"p"},"actions")," section to fill the new table with the data:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"prepare-departures {\n    type = CopyAction\n    inputId = stg-departures\n    outputId = int-departures\n    metadata {\n        feed = compute\n    }\n}\n")),Object(r.b)("p",null,"Finally, adapt the action definition for ",Object(r.b)("inlineCode",{parentName:"p"},"join-departures-airports"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"change ",Object(r.b)("inlineCode",{parentName:"li"},"stg-departures")," to ",Object(r.b)("inlineCode",{parentName:"li"},"int-departures")," in inputIds"),Object(r.b)("li",{parentName:"ul"},"change ",Object(r.b)("inlineCode",{parentName:"li"},"stg_departures")," to ",Object(r.b)("inlineCode",{parentName:"li"},"int_departures")," in the first SQLDfsTransformer (watch out, you need to replace the string 4 times)")),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Explanation")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"We changed ",Object(r.b)("inlineCode",{parentName:"li"},"int-airports")," from CSV to Delta Lake format"),Object(r.b)("li",{parentName:"ul"},"Created an additional table ",Object(r.b)("inlineCode",{parentName:"li"},"int-departures")),Object(r.b)("li",{parentName:"ul"},"Created an action ",Object(r.b)("inlineCode",{parentName:"li"},"prepare-departures"),"  to fill the new integration layer table ",Object(r.b)("inlineCode",{parentName:"li"},"int-departures")),Object(r.b)("li",{parentName:"ul"},"Adapted the existing action ",Object(r.b)("inlineCode",{parentName:"li"},"join-departures-airports")," to use the new table ",Object(r.b)("inlineCode",{parentName:"li"},"int-departures"))))),Object(r.b)("p",null,"To run our data pipeline, first delete the data directory - otherwise DeltaLakeTableDataObject will fail because of existing files in different format.\nThen you can execute the usual ",Object(r.b)("em",{parentName:"p"},"docker run")," command for all feeds:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"mkdir -f data\ndocker run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/config:/mnt/config smart-data-lake/gs1:latest -c /mnt/config --feed-sel 'download*'\ndocker run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/config:/mnt/config smart-data-lake/gs1:latest -c /mnt/config --feed-sel '^(?!download).*'\n")),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Why two separate commands?",Object(r.b)("br",{parentName:"p"}),"\n","Because you deleted all data first.   "),Object(r.b)("p",{parentName:"div"},"Remember from part 1 that we either need to define a schema for our downloaded files or we need to execute the download steps separately on the first run.\nThe first command only executes the download steps, the second command executes everything but the download steps (regex with negative lookahead).\nSee ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/sdl-docs/docs/getting-started/troubleshooting/common-problems"}),"Common Problems")," for more Info."))),Object(r.b)("p",null,"Getting an error like ",Object(r.b)("inlineCode",{parentName:"p"},"io.smartdatalake.util.webservice.WebserviceException: Read timed out"),"? Check the list of ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"../troubleshooting/common-problems"}),"Common Problems")," for a workaround."),Object(r.b)("h2",{id:"reading-delta-lake-format-with-spark"},"Reading Delta Lake Format with Spark"),Object(r.b)("p",null,"Checking our results gets more complicated now - we can't just open delta lake format in a text editor like we used to do for CSV files.\nWe could now use SQL to query our results, that would be even better.\nOne option is to use a Spark session, i.e. by starting a spark-shell.\nBut state-of-the-art is to use notebooks like Jupyter for this.\nOne of the most advanced notebooks for Scala code we found is Polynote, see ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://polynote.org/"}),"polynote.org"),"."),Object(r.b)("p",null,"We will now start Polynote in a docker container, and an external Metastore (Derby database) in another container to share the catalog between our experiments and the notebook.\nTo do so, run the following commands in the projects root directory:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"docker-compose build\nmkdir -p data/_metastore\ndocker-compose up\n")),Object(r.b)("p",null,"This might take multiple minutes.\nYou should now be able to access Polynote at ",Object(r.b)("inlineCode",{parentName:"p"},"localhost:8192"),". "),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Docker on Windows")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If you use Windows, please read our note on ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"../troubleshooting/docker-on-windows"}),"Docker for Windows"),"."))),Object(r.b)("p",null,'But when you walk through the prepared notebook "SelectingData", you won\'t see any tables and data yet.\nCan you guess why?',Object(r.b)("br",{parentName:"p"}),"\n","This is because your last pipeline run used an internal metastore, and not the external metastore we started with docker-compose yet.\nTo configure Spark to use our external metastore, add the following spark properties to the application.conf under global.spark-options.\nYou probably don't have a global section in your application.conf yet, so here is the full block you need to add at the top of the file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'global {\n  spark-options {\n    "spark.hadoop.javax.jdo.option.ConnectionURL" = "jdbc:derby://metastore:1527/db;create=true"\n    "spark.hadoop.javax.jdo.option.ConnectionDriverName" = "org.apache.derby.jdbc.ClientDriver"\n    "spark.hadoop.javax.jdo.option.ConnectionUserName" = "sa"\n    "spark.hadoop.javax.jdo.option.ConnectionPassword" = "1234"\n  }\n}\n')),Object(r.b)("p",null,"This instructs Spark to use the external metastore you started with docker-compose.\nYour Smart Data Lake container doesn't have access to the other containers just yet.\nSo when you run your data pipeline again, you need to add a parameter ",Object(r.b)("inlineCode",{parentName:"p"},"--network getting-started_default")," to join the virtual network where the metastore is located:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"docker run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/config:/mnt/config --network getting-started_default smart-data-lake/gs1:latest -c /mnt/config --feed-sel '.*'\n")),Object(r.b)("p",null,"When using podman you need to join the pod where the metastore is located with ",Object(r.b)("inlineCode",{parentName:"p"},"--pod getting-started"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"podman run --rm -v ${PWD}/data:/mnt/data -v ${PWD}/config:/mnt/config --pod getting-started smart-data-lake/gs1:latest -c /mnt/config --feed-sel '.*'\n")),Object(r.b)("p",null,"After you run your data pipeline again, you should now be able to see our DataObjects data in Polynote.\nNo need to restart Polynote, just open it again and run all cells.\n",Object(r.b)("a",{target:"_blank",href:a(156).default},"This")," is how the final configuration file should look like. Feel free to play around."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Delta Lake tuning")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"You might have seen that our data pipeline with DeltaTableDataObject runs a Spark stage with 50 tasks several times.\nThis is delta lake reading it's transaction log with Spark. For our data volume, 50 tasks are way too much.\nYou can reduce the number of snapshot partitions to speed up the execution by setting the following Spark property in your ",Object(r.b)("inlineCode",{parentName:"p"},"application.conf")," under ",Object(r.b)("inlineCode",{parentName:"p"},"global.spark-options"),":"),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'"spark.databricks.delta.snapshotPartitions" = 2\n')))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Spark UI from Polynote")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"On the right side of Polynote you find a link to the Spark UI for the current notebooks Spark session.\nIf it doesn't work, try to replace 127.0.0.1 with localhost. If it still doesn't work, replace with IP address of WSL (",Object(r.b)("inlineCode",{parentName:"p"},"wsl hostname -I"),"). "))),Object(r.b)("p",null,"In the next step, we are going to take a look at keeping historical data..."))}d.isMDXComponent=!0}}]);